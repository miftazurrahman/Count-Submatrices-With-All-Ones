import java.util.ArrayDeque;
import java.util.Deque;

class Solution {
    public int numSubmat(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        int[] heights = new int[n];
        long ans = 0;

        for (int i = 0; i < m; i++) {
            // build histogram heights for this row as the bottom
            for (int j = 0; j < n; j++) {
                heights[j] = (mat[i][j] == 0) ? 0 : heights[j] + 1;
            }

            // monotonic stack: {height, count}
            Deque<int[]> st = new ArrayDeque<>();
            long sum = 0; // number of all-1 submatrices ending at current column with this row as bottom

            for (int j = 0; j < n; j++) {
                int h = heights[j];
                int cnt = 1;

                while (!st.isEmpty() && st.peek()[0] >= h) {
                    int[] top = st.pop();
                    cnt += top[1];
                    // reduce contributions due to lower height h
                    sum -= (long) top[1] * (top[0] - h);
                }

                if (h > 0) {
                    st.push(new int[]{h, cnt});
                    sum += h;
                }
                ans += sum;
            }
        }
        return (int) ans;
    }
}
